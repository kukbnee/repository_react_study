Single Page Application
새로고침없이 부드럽게 동작하는 html 페이지
생js로 할수 있지만 코드가 길어지고 복잡함 그렇기때문에 리액트라는 라이브러리를 사용!
html 재사용 편리
같은문법으로 앱개발 가능(리액트 네이티브)

리액트 설치
-node js 설치
-vsCode 설치
-create react app이란 라이브러리를 이용하여 프로젝트 생성
 npm이 필요한데 (라이브러리를 다모아놓은 플랫폿같은거) node js설치시 딸려옴

node_modules 프로젝트 구동에 필요한 모든 라이브러리 소스코드 보관함(그냥냅둠)
public html,img파일 보관함(static파일, 일단냅둠)
src 소스코드보관함
 -간단한 구조 : App.js 메인페이지(JSX) > index.js > index.html
package.json 프로젝트정보 기입(일단냅둠)


원래 리액트에스 <div>만드는 법
React.createElement('div', null, 'Hello World')
-> JSX -> <div></div>

[JSX 문법1] class 넣을 땐 className (자바스크립트 class와 겹치기 때문에)
[JSX 문법2] 변수 넣을 땐(데이터바인딩) {중괄호} (document.querySelector('h4').innerHtml = 중괄호;)
[JSX 문법3] style 넣을 땐 style={{스타일명:'값'}}

[state 문법] 
 1)import { useState } from 'react';
 2)useState(보관할 자료) -> [?, ?] 이런식으로 남는다
 3)let[작명, 작명] (state에 보관했던 자료, state변경 도와주는 함수, 이걸 써야 html 재렌더링이 잘됨)

[Destructuring 문법]
let num = [1, 2];
let a = num[0]; //1
let b = num[1]; //2

let [a, b] = [1, 2];

why use STATE?
 변수 vs state : state는 변경되면 state쓰던 html은 자동 재 렌더링됨
 자주 변경될거 같은 html 부분은 state로 만들어 놓기
 
/* eslint-disable */
Lint 끄는 기능 : worning메세지 안나온다

function() {} , ()=>{} 같은거임
function Modal() {} , let Modal = () => {}

[state 변경함수 특징]
기존 state == 신규 state 인경우 변경 안해줌(자원절약)
그러므로 state가 array/object면 독립적 카피본을 만들어서 수정해야함 (array/object는 call by reference 이기때문?)

[컴포넌트 만드는법]
1.function 만들고
2.return ()안에 html 담기
3.<함수명></함수명>쓰기
**return()안에 html병렬기입하려면
 <></>안에 사용가능(의미없는div대신)
 
[컴포넌트 장점]
1.반복적인 html 축약할때
2.큰페이지들
3.자주변경되는 것(html ui)들
[컴포넌트 단점]
state 가져다쓸때 문제생김

[동적인 UI만드는 step]
1.html css로 미리 디지안 완성
2.UI의 현재 상태를 state로 저장
3.state에 따라 UI가 어떻게 보일지 작성

자바스크립트에선 버튼눌렀을때 모달창 html을 직접 건드림
리액트에선 버튼눌렀을때 모달창 스위치(state)만 건드림

[반복문으로 같은 html 반복생성]
[map()사용법]
[].map(function(array데이터,array인덱스){})
1. 왼쪽 array자료만큼 내부코드 실행
2. return오른쪽에 있는걸 array로 담아줌
3. 유용한 파라미터 2개사용가능

[부모 -> 자식 state 전송하는법]
1. <자식컴포넌트 작명={stat이름}>
2. props파라미터 등록 후 props.작명 사용

**state만드는 곳은 state사용하는 컴포넌트들 중 최상위 컴포넌트(보통 App에 만듬)

**상위html로 퍼지는 이벤트버블링을 막고싶으면 e.stopPropagation()사용(상위요소로 퍼지는걸 막는다)